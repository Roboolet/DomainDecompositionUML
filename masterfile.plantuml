@startuml Geometry Dash Hierarchy

' -- Leas section --
' Portals
class Portal
{
    Vector4 triggerBounds
    void OnTriggerEnter()
}
interface IPortalDecorator
{
    Portal owner
    void OnEnter()
}
Interface IInvertable
{
    bool isInverted
}

class GravityPortalDecorator
{
    bool isInverted
    void OnEnter()
}
class GamemodePortalDecorator
{
    GamemodeTypes type
    void OnEnter()
}
class SizePortalDecorator
{
    bool isInverted
    void OnEnter()
}
class DualPortalDecorator
{
    bool isInverted
    void OnEnter()
}
class TelePortalDecorator
{
    Vector3 exitPoint
    void OnEnter()
}
class ScreenFlipPortalDecorator
{
    bool isInverted
    void OnEnter()
}
class SpeedPortalDecorator
{
    float speedMultiplier
    void OnEnter()
}


' Decorators
Portal o-- IPortalDecorator
IPortalDecorator <|.. GravityPortalDecorator
IPortalDecorator <|.. GamemodePortalDecorator
IPortalDecorator <|.. SizePortalDecorator
IPortalDecorator <|.. DualPortalDecorator
IPortalDecorator <|.. TelePortalDecorator
IPortalDecorator <|.. ScreenFlipPortalDecorator
IPortalDecorator <|.. SpeedPortalDecorator

IInvertable <|.. GravityPortalDecorator
IInvertable <|.. SizePortalDecorator
IInvertable <|.. DualPortalDecorator
IInvertable <|.. ScreenFlipPortalDecorator

' <|-- Extension
' *-- Composition
' o-- Aggregation
' <|.. dotted line

' Dion's section, gamemodes  
interface State {
    void Execute()
    void OnTap()
    void OnHold()
}

class CubeState {
    void Execute()
}
class ShipState {
    void Execute()
}
class BallState {
    void Execute()
}
class UFOState {
    void Execute()
}
class WaveState {
    void Execute()
}
class RobotState {
    void Execute()
}
class SpiderState {
    void Execute()
}

class StateMachine {
    enum GamemodeTypes
    Dictionary[] states
    void ChangeState
}

' Connections 
CubeState ..|> State
ShipState ..|> State
BallState ..|> State
UFOState ..|> State
WaveState ..|> State
RobotState ..|> State
SpiderState ..|> State

State --o StateMachine
'Maarten's Section: Orbs'

class Jump {
    float jumpForce
}
class Gravity


object Yellow
object Purple
object Orange


object Blue 
object Green


Jump <|-- Yellow
Jump <|-- Orange
Jump <|-- Purple

Gravity <|-- Blue
Gravity <|-- Green


@enduml
